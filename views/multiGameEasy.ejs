<!DOCTYPE html>
<html lang="en">

<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <script src="https://code.jquery.com/jquery-3.5.0.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css" integrity="sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ" crossorigin="anonymous">
    <link href="/style.css" rel="stylesheet">
    <link href="/main.css" rel="stylesheet">
    <link href="/graWieloOsobowa.css" rel="stylesheet">


</head>

<body>


    <nav>
        <h4>Memory card game</h4>
        <% if (user) { %>
            <ul>
                <li>
                    Logged in as
                    <%= user.username %>
                </li>
                <li>
                    <a href="/ranking">Ranking</a>
                    <a href="/auth/wyloguj" style="color:crimson">Log out</a>
                </li>
            </ul>
            <% } else { %>
                <ul>
                    <li><a href="/logowanie">Sign in</a></li>
                    <li><a href="/rejestracja">Register</a></li>
                </ul>
                <% } %>
    </nav>
    <% if (message) { %>
        <h4 class="alert alert-info" style="text-align: center; margin-top: 50px;" role="alert">
            <%= message %>
        </h4>
        <% } %>

            <div id="menu">
            </div>
            <div class="container">
                <!--<span class="timer"><i class="fa fa-hourglass-start"></i> Timer: 00:20</span>
                 <section class="score-panel">
                    <span class="text"> Moves:</span><span class="moves-counter">0</span>
                    <div class="timer-container">
                        <span class="timer"><i class="fa fa-hourglass-start"></i> Timer: 00:00</span>
                    </div>
                    <div class="reset">
                        <button class="btn reset-btn">Reset <i class="fa fa-repeat"></i></button>
                    </div>
                </section> -->




                <ul class="deck"></ul>
                <div class="rightMenu">
                    <div class="players">

                    </div>

                    <div class="chatConteiner">

                        <div id="chatMessages">
                            <ul id="messages"></ul>
                        </div>
                        <div class="chatSend">
                            <form id="chatForm" action="">
                                <input id="chatInput" autocomplete="off" /><button>Send</button>
                            </form>
                        </div>

                    </div>

                </div>
            </div>

            <div class="chat">
                <div id="chatMessages">
                    <ul id="messages"></ul>
                </div>
                <div class="chatSend">
                    <form id="chatForm" action="">
                        <input id="chatInput" autocomplete="off" /><button>Send</button>
                    </form>
                </div>
            </div>







</body>

<script src="/kartyMulti.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://code.jquery.com/jquery-3.1.1.slim.min.js" integrity="sha384-A7FZj7v+d/sdmMqp/nOQwliLvUsJfDHW+k9Omg/a/EheAdgtzNs3hpfag6Ed950n" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js" integrity="sha384-DztdAPBWPRXSA/3eYEEUWrWCy7G5KFbe8fFjk5JAIxUYHKkDx6Qin1DkWx51bBrb" crossorigin="anonymous"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script>

</html>
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>
<script>
    //zorganizowanie graczy
    let turn = 0;
    let playersreq = '<%- JSON.stringify(players) %>'
    playersreq = JSON.parse(playersreq);
    let user = {
        id: '<%- user.id %>',
        username: '<%- user.username %>'
    }
    let difficulty = '<%- difficulty %>'
    console.log(difficulty)
    let player_amount = '<%- players.player_amount %>'
    let leader = '<%- players.leader %>'
    let room_id = '<%- room_id %>'
    let players = []
    let k = 0
    let pplayer = []
    let ppoints = []
    for (let i = 1; i < 5; i++) {
        if (playersreq['player' + i]) {
            players[k] = playersreq['player' + i];
            k++;
        }
    }

    let menu = document.getElementById('menu')

    function initMenu() {
        for (let i = 0; i < players.length; i++) {
            let playerdiv = document.createElement('div');
            playerdiv.classList.add("playerDiv");
            let player = document.createElement('p')
            player.id = 'player' + i;
            pplayer.push(player);
            let points = document.createElement('p')
            points.id = 'points' + i;
            points.innerText = +0;
            ppoints.push(points);

            player.innerText = players[i].username;

            menu.appendChild(playerdiv);
            playerdiv.appendChild(player);
            playerdiv.appendChild(points);
        }
    }

    function updatePplayer(o) {
        pplayer.forEach(e => {
            if (e.id === 'player' + o) {
                e.classList.add('currPlayer')
            } else {
                e.classList.remove('currPlayer');
            }
        })
    }

    function updatePpoints(o, x) {
        ppoints.forEach(e => {
            console.log('updatepoints', e.id, o, e.innerText)
            if (e.id === 'points' + o) {
                console.log('jeeeeeeee')
                e.innerText = x / 2;
            }
        })
    }



    let socket = io()
    socket.on('connect', function(data) {
        let random = Math.floor(Math.random() * 10);
        let board = returnSD(difficulty);
        const dane = {
            room_id,
            number: random,
            board
        }
        socket.emit('joinGameRoom', dane)
    });
    socket.on('disconnect', function(data) {});


    //chat setup
    let form = document.getElementById('chatForm');
    let input = document.getElementById('chatInput');
    let messages = document.getElementById('messages');

    form.addEventListener('submit', function(e) {
        e.preventDefault();
        if (input.value) {
            let chatInput = {
                value: input.value,
                room_id: room_id,
                user: user.username
            }
            socket.emit('newChatMessage', JSON.stringify(chatInput));
            input.value = '';
        }
    });

    //socket otrzymuje informacje o nowej wiadomosci wyslanej w pokoju => dodaje ją do czatu
    socket.on('newChatMessage', function(msg) {
        let item = document.createElement('li');
        item.textContent = msg.user + ": " + msg.value;
        messages.appendChild(item);
        var okno = document.getElementById("chatMessages");
        //window.scrollTo(0, document.okno.scrollHeight);
        okno.scrollTo(0, okno.scrollHeight);
    });

    socket.on('setBoard', async data => {
        console.log(players)
        startGame(data);
        initMenu();
        updatePplayer(0);
        const x = await changeUM(user.id, players[turn]._id, socket, room_id);
        turn++;
    })

    socket.on('Flip', data => {
        document.getElementById(data).classList.add("flip")
    })

    socket.on('removeFlip', data => {
        setTimeout(() => {
            document.getElementById(data.card1).classList.remove("flip")
            document.getElementById(data.card2).classList.remove("flip")
        }, 700);
        if (turn > player_amount - 1) {
            turn = 0;
        }
        updatePplayer(turn);
        changeUM(user.id, players[turn]._id, socket, room_id)
        console.log('removeFlip')
        turn++;
    })

    socket.on('playerChange', () => {
        if (turn > player_amount - 1) {
            turn = 0;
        }
        updatePplayer(turn);
        changeUM(user.id, players[turn]._id, socket, room_id)
        console.log('playerChange')
        turn++;
    })

    socket.on('confirmFlip', data => {
        console.log('confirmFlip', data)
        setTimeout(() => {
            document.getElementById(data.card1).classList.add("match")
            document.getElementById(data.card2).classList.add("match")
            document.body.style.pointerEvents = "auto";
        }, 600);
        updatePpoints(turn - 1, data.points)
    })

    socket.on('gameFinished', () => {
        stopTime();
    })

    //chat
    let form = document.getElementById('chatForm');
    let input = document.getElementById('chatInput');
    let messages = document.getElementById('messages');

    form.addEventListener('submit', function(e) {
        e.preventDefault();
        if (input.value) {
            let chatInput = {
                value: input.value,
                room_id: room_id,
                user: user.username
            }
            socket.emit('newChatMessage', JSON.stringify(chatInput));
            input.value = '';

        }
    });

    //socket otrzymuje informacje o nowej wiadomosci wyslanej w pokoju => dodaje ją do czatu
    socket.on('newChatMessage', function(msg) {
        let item = document.createElement('li');
        item.textContent = msg.user + ": " + msg.value;
        messages.appendChild(item);
        var okno = document.getElementById("chatMessages");
        //window.scrollTo(0, document.okno.scrollHeight);
        okno.scrollTo(0, okno.scrollHeight);

    });
</script>